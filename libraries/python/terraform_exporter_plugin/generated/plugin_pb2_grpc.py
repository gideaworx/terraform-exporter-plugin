# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import plugin_pb2 as plugin__pb2


class ExportCommandStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Export = channel.unary_unary(
                '/plugin.ExportCommand/Export',
                request_serializer=plugin__pb2.ExportRequest.SerializeToString,
                response_deserializer=plugin__pb2.ExportResponse.FromString,
                )
        self.Info = channel.unary_unary(
                '/plugin.ExportCommand/Info',
                request_serializer=plugin__pb2.NoArgs.SerializeToString,
                response_deserializer=plugin__pb2.CommandInfo.FromString,
                )
        self.Help = channel.unary_unary(
                '/plugin.ExportCommand/Help',
                request_serializer=plugin__pb2.NoArgs.SerializeToString,
                response_deserializer=plugin__pb2.SingleString.FromString,
                )


class ExportCommandServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Export(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Help(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExportCommandServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=plugin__pb2.ExportRequest.FromString,
                    response_serializer=plugin__pb2.ExportResponse.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=plugin__pb2.NoArgs.FromString,
                    response_serializer=plugin__pb2.CommandInfo.SerializeToString,
            ),
            'Help': grpc.unary_unary_rpc_method_handler(
                    servicer.Help,
                    request_deserializer=plugin__pb2.NoArgs.FromString,
                    response_serializer=plugin__pb2.SingleString.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.ExportCommand', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExportCommand(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportCommand/Export',
            plugin__pb2.ExportRequest.SerializeToString,
            plugin__pb2.ExportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportCommand/Info',
            plugin__pb2.NoArgs.SerializeToString,
            plugin__pb2.CommandInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Help(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportCommand/Help',
            plugin__pb2.NoArgs.SerializeToString,
            plugin__pb2.SingleString.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExportPluginStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Export = channel.unary_unary(
                '/plugin.ExportPlugin/Export',
                request_serializer=plugin__pb2.PluginRequest.SerializeToString,
                response_deserializer=plugin__pb2.ExportResponse.FromString,
                )
        self.Help = channel.unary_unary(
                '/plugin.ExportPlugin/Help',
                request_serializer=plugin__pb2.SingleString.SerializeToString,
                response_deserializer=plugin__pb2.SingleString.FromString,
                )
        self.Info = channel.unary_unary(
                '/plugin.ExportPlugin/Info',
                request_serializer=plugin__pb2.NoArgs.SerializeToString,
                response_deserializer=plugin__pb2.PluginInfo.FromString,
                )


class ExportPluginServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Export(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Help(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExportPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=plugin__pb2.PluginRequest.FromString,
                    response_serializer=plugin__pb2.ExportResponse.SerializeToString,
            ),
            'Help': grpc.unary_unary_rpc_method_handler(
                    servicer.Help,
                    request_deserializer=plugin__pb2.SingleString.FromString,
                    response_serializer=plugin__pb2.SingleString.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=plugin__pb2.NoArgs.FromString,
                    response_serializer=plugin__pb2.PluginInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.ExportPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExportPlugin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportPlugin/Export',
            plugin__pb2.PluginRequest.SerializeToString,
            plugin__pb2.ExportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Help(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportPlugin/Help',
            plugin__pb2.SingleString.SerializeToString,
            plugin__pb2.SingleString.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.ExportPlugin/Info',
            plugin__pb2.NoArgs.SerializeToString,
            plugin__pb2.PluginInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
